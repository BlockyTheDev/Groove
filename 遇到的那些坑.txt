1.不能直接给图片添加.jpg后缀名，会导致QPixmap无法识别

2.网格布局的行和列只能增加不能减少，但是可以改变没有用到的行或者列的宽度

3.要想改变旧布局，只需在一个总的布局中添加后来想要移除的布局就行，比如all_h_layout中addLayout(gridLayout)，
后面要改变的时候只需removeItem(gridLayout)

4.deleteLater()释放内存

5.滚动条最好手动设置最小高度，不然可能太小而看不见

6.m4a不存在某个键时需要先手动创建一个空列表，再将值添加到列表中

7.songInfo.json文件的album是一个列表，如果原来的专辑名不符合存储条件就会有两个元素，第一个是原始的album名，第二个是修改后的album名

8.albumInfo.json的album存的是album原名,cover_path存的是修改专辑名后的专辑封面路径

9.如果widget是自定义类要设置背景颜色首先要添加一句：
self.setAttribute(Qt::WA_StyledBackground,true);
self.setStyleSheet("background-color: rgb(255,255, 255)");

10.给主窗口设置磨砂效果，然后留下一部分完全透明的给子部件，这样看起来就好像子部件也打开了磨砂效果

11.直接添加阴影会有边框的出现，得想办法把边框掰弯

12.如果需要指定无边框窗体，但是又需要保留操作系统的边框特性，可以自由拉伸边框，可以使用 setWindowFlags(Qt::CustomizeWindowHint);

13.使用raise_()函数可以使子窗口置顶

14.e.pos()返回的是事件相对小部件自己的位置

15.可以通过设置最外层的布局self.all_h_layout.setSizeConstraint(QLayout.SetFixedSize)来自动调整大小

16.要在小部件上使用磨砂效果只需将其设置成独立窗体，比如qt.window、Qt.popup

17.可以通过设置已有的属性来直接改变小部件的状态，比如label.setProperty('text',str)可以将实例的text设置为想要的str,
而且还可以在一个小部件上设置多个自定义的属性

18.setContentsMargins的顺序为left、top、right、bottom

17.使用self.window()可以直接获取顶层对象

18.当把小部件添加到groupBox中时,groupBox会变成parent()

19.要想动态更新QListWidget的Item的尺寸只需重写resizeEvent()的时候item.setSizeHint(QSize())

20.可以在样式表中用background:transparent来替代setAttribute(Qt.WA_TranslucentBackground)

21.画图用drawPixmap别用drawRect(),要写字的时候不能painter.setPen(Qt.NoPen)

22.文件夹的最后一个字符绝对不能是/，不然会出错

23.如果出现主界面卡顿，可以通过信号提前结束此时进行的槽函数，将信号连到另一个槽函数来处理

24.font-weight = 500时会变为好康的楷体

25.self.pos().x()和self.x()得到的结果相同，代表窗体标题栏左上角的全局坐标，self.geometry().x()得到的是客户区的全局坐标

26.弹出窗口的qss不起作用时可以手动setStyle(QAppliction.style())

27.使用adjustSize()自动调整尺寸

28.QListWidget使用setViewportMargins()设置内边距

29.当滚动条背景出现花纹时记得将
QScrollBar::add-page:vertical,
QScrollBar::sub-page:vertical {
    background: none;
}

30.背景透明会导致透视变换黑边的出现

31.处于省电模式下运行会卡顿

32.paintEvent不会覆盖小部件